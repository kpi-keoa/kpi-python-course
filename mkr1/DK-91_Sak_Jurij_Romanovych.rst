==============================
Сак Юрій Романович
==============================


#. Гілки в Git: для чого використовуються, який принцип роботи з гілками. Наведіть команди для створення нової гілки та переключення
   між гілками.

   -Відповідь: Гілки в Гіті використовують для звін коду проекта не втручаючись у сам проект. Користувач робить форк(копію) проекта у свою гілку де він може спокійно вносити зміни без ризику на псування проекту. Далі внесені зміни подаються у Pull Request, тобто запить на об'єднання гілки зі змінами із Master гілкою, де вже project manager вірішує додавати ці зміни чи ні(об'єднати гілки чи ні)

#. Який формат опису повідомлень комітів використовується в курсі? Навіщо потрібно дотримуватися певного формату?
   Наведіть приклад команди, що додає до репозиторію коміт з важливими виправленнями кодової бази

   - 

#. Оператор ідентичності та оператор ``==``. В чому їх відмінності? 
   Коли в умовних конструкціях варто використовувати той чи інший оператор?

   -Відповід: Оператор ідентичності is відповідає за перевірку ідентичності об'єктів, наприклад x is y буде істинно тільки тоді, коли х та у вказують на один і той самий об'єкт, йде оцінка зачення true якщо змінні вказують на один об'єкт, та false якщо на різні. Оператор == відповідає за первірку значень об'єктів, вікористовується для порівняння значень двох об'єктів і тоді відає true якщо х = у по значенням, і false якщо ці значення не рівні.

#. Якому емодзі відповідає байтова строка ``b'\xff\xfe=\xd8\r\xdc'`` (UTF-16)? Що значить даний запис байтової строки?
   Наведіть приклад коду, що перекодує дану строку в UTF-8 та вкажіть результат у вигляді коментаря

   - 

#. Створіть функцію, яка приймає в якості першого аргументу бажаний опір послідовно з'єднаних резисторів *R* [Ом],
   а в якості подальших аргументів – величини резисторів, що є в наявності [Ом].
   Функція повертає кортеж (tuple), першим елементом якого є словник типу ``{номінал: кількість}``, а другим
   елементом – абсолютне відхилення результуючого опору від бажаного [Ом].

   -

#. Наведіть приклад функції, що **коректно** приймає в якості значення за замовчанням mutable-об'єкт.
   Чому коректно робити саме так?

   - 

#. Які цикли Python вам відомі? Яким чином примусово перейти до наступної ітерації в тілі циклу? Наведіть приклад коду.

   -Відповідь: 
     1. Цикл while - виконує тіло циклу поки умови в ціклі істинні 
     2. ЦИкл for - проходить по кожному об'єкту що ітерується, наприклад списку чи рядку, і під час кожного прогону віконує тіло циклу

     Щоб у тілі циклу примусово перйти до наступної ітерації використвують оператор continiue який починає наступний прохід циклу оминаючи інші умови
Приклад:
for i in 'Continue exaple:':
	if i == 't':
		continue
	print(i * 2, end = '')

	маемо код де після символу "t" виводится фраза з подвійними символами але без цього символу
 
     	

#. Створити клас Animal. Унаслідувати від нього два класи *Mammal* та *Amphibian*.
   Від класу *Mammal* унаслідувати два класи – *Cat* та *Dog*.
   Клас Animal передбачає наявність поля ``likes_water`` (на рівні класу, не об'єкта), яке за замовчуванням задане рівним ``False``
   і перевизначається в дочірніх класах (за необхідності).
   Для класу *Mammal* визначити метод ``milk()``, який виводитиме в стандартний вивід *"{name}: delicious!"*.
   Для *Amphibian* та *Dog* визначити метод ``swim()``, який виводитиме в стандартний вивід *"{name}: swimming makes me feel good"*.
   При написанні ``swim()`` уникати copy-paste, натомість, згрупувати єдину логіку в окрему функцію, яку викликатиме кожен клас.
   Замість *{name}* підставляти значення атрибута ``name``, який задається при створенні об'єкту.
   Навести приклад використання.

   -
