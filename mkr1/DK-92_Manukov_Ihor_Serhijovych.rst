==============================
Мануков Ігор Сергійович
==============================


#. Локальні та віддалені репозиторії Git. Наведіть команду для відправки локальних комітів з гілки dev до віддаленого репозиторію.

Локальний репозиторій – ваша власна копія репозиторію, у яку безпосередньо йдуть коміти з вашої робочої папки. Для роботи з даним репозиторієм вам не потрібно підключення до інтернету. Віддалений репозіторій, це репозіторій до якого мають доступ інші користувачі. Push (push) – закидування зміни локального репозиторію у віддалений репозиторій.

#. Що таке об'єднання гілок та для чого використовується? Конфлікти при об'єднанні.
   Наведіть приклад конфлікту (синтаксис) та команди для внесення змін до репозиторію після вирішення конфлікту.

Якщо ви працюєте над гілкою, яка не має прямих нащадків то необхідно її об'єднати з робочою гілкою. Замість того, щоб просто пересунути вказівник гілки вперед, Git створює новий знімок, що є результатом 3-точкового злиття, і автоматично створює новий коміт, що вказує на нього. Його називають комітом злиття (merge commit) та його особливістю є те, що він має більше одного батьківського коміту.  Git сам визначає найбільш підходящого спільного нащадка, якого брати за основу зливання; це відрізняє Git від старіших систем таких як CVS чи Subversion (до версії 1.5), де розробник, що виконує зливання, сам повинен вказувати що брати за основу зливання. Трапляється, що цей процес не проходить гладко. Якщо ви маєте зміни в одному й тому самому місці в двох різних гілках, Git не зможе їх просто злити. У цьому випадку Git не створив автоматичний коміт зливання. Він призупинив процес допоки ви не вирішите конфлікт. Щоб розв’язати цю несумісність, вам потрібно вибрати одну із версій, або самостійно поредагувати вміст файлу. Після того, як ви розв’язали подібні несумісності в кожному блоці конфліктних файлів, виконайте для них git add, щоб індексувати та позначити, як розв’язані. Можете виконати git status, щоб перевірити чи всі конфлікти розв’язані.

#. Множина (set). Для чого слугує? Чим відрізняється від списку (list) та кортежа (tuple)? Наведіть приклади використання.

Set мінливий тип - зміст може бути змінено за допомогою методів, таких як add() та remove(). Оскільки він змінюється, він не має хеш-значення і не може використовуватися як ключ словника або елемент іншого набору. Список можна записати як список значень (елементів), розділених комами, у квадратних дужках. Списки можуть містити елементи різних типів, але зазвичай всі елементи мають один і той самий тип. Кортежі - це незмінні послідовності, які зазвичай використовуються для зберігання колекцій різнорідних даних. Кортежі також використовуються у випадках, коли потрібна постійна послідовність однорідних даних.

my_list = ['p', 'r', 'o', 'b', 'e']

//first item
print(my_list[0])  //p

//third item
print(my_list[2])  //o

//fifth item
print(my_list[4])  //e

//Nested List
n_list = ["Happy", [2, 0, 1, 5]]

//Nested indexing
print(n_list[0][1]) //a

print(n_list[1][3]) //5

//Error! Only integer can be used for indexing
print(my_list[4.0])

#. Наведіть код для створення списку, що містить в якості елементів цілочисленні значення від 1 до 19 (включно) з кроком 1,
   тобто 1, 3, 5, 7, 9, 11, 13, 15, 17, 19. У відповіді вирішальне значення має оптимальність конструкції.

for i in range(1, 20, 2):
    print(i)

#. Docstring у функціях. Для чого використовуються? Наведіть приклад функції, що виконує розрахунок за певною формулою
   з області електроніки або фінансів (на власний розсуд) та містить Docsting (Coding Style – Google)

Docstring використовується для короткого пояснення роботи функції. 

def vol(res):    //write voltage series up to res
     """Print true voltage depending on resistance series up to resistance."""
     a, b = 1.24, 1
     while b < 1000000:
         b = a*res
         print(b, end=', ')
      print()

#. Аргументи функцій. Яким чином задати значення аргументу за замовчуванням? Коли це не спрацює?
   Наведіть приклади (пов'язані з галуззю електроніки, наприклад, розрахунок за формулою).

Функція може приймати довільну кількість аргументів або не приймати їх. Також поширені функції з довільним числом аргументів, функції з позиційними та іменованими аргументами, обов'язковими та необов'язковими.У виклику функції аргументи ключового слова повинні йти за позиційними аргументами. Усі передані аргументи ключового слова повинні відповідати одному з аргументів, що приймаються функцією та їх порядок не є важливим. Це також включає необов'язкові аргументи також дійсний. Жоден аргумент не може набувати значення більше одного разу.

def func(m, a=2): // a - необязательный аргумент
    """F = m * a - the second law"""
    F = m * a
    return F

#. Тернарний оператор Python. Навести код, що **за допомогою тернарного оператора**
   присвоїть змінній ``var`` значення ``69`` якщо змінна ``arg`` задана в ``None``, в іншому випадку – присвоїть значення ``arg``.
   Як зробити це без тернарного оператора? Наведіть приклад коду.

У Python існує конструкція, яка за своєю дією аналогічна конструкції if-else, але є виразом. Вона називається тернарним оператором. 

//З тернарним оператором
arg = None 
var = 69 if arg == None else arg
var

//Без тернарного оператора
arg = None
if arg == None 
    var = 69
else 
    var = arg
print(var)

#. Які цикли Python вам відомі? Яким чином можна примусово вийти з циклу?

While - один із найбільш універсальних циклів у Python, тому досить повільний. Виконує тіло циклу до того часу, поки умова циклу істинно. Цикл for виконується набагато швидше за цикл while, але менш універсальний. Цей цикл проходить по будь-якому об'єкту, що ітерується, і під час кожного проходу виконує тіло циклу. Оператор break достроково перериває цикл. 

for i in 'hello world':
     if i == 'o':
         break
     print(i, end='')
