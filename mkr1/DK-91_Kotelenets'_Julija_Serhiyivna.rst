==============================
Котеленець Юлія Сергіївна
==============================


#. Гілки в Git: для чого використовуються, який принцип роботи з гілками. Наведіть команди для створення нової гілки та переключення
   між гілками.
	-гілка - це по суті копія оригінального проекту, але вона починає створювати свою власну історію. Наприклад, якщо потрібно протестувати декілька різних версій проекту та обрати найбільш оптимальну. Коли ми створюємо нову гулку, ми створюємо новий вказівник.
Щоб створити нову гілку: 
git branch [name]
А щоб пересуватися потрібно:
git checkout [name]
Або зробити все однією командою:
git checkout -b [name]
#. Яким чином можна додати зміни до вже створеного (останнього) коміту? Наведіть приклад.
   Чи варто так робити в основних публічних гілках віддаленого репозиторію? Якщо так, коли? Якщо ні, чому?
	-Після зміни наприклад, якогось файлу потрібно виконати такі команди, щоб змінити попередній коміт та не створювати новий:
git add [name]
git commit --amend -m "[comment]"
Коли виправляється останній коміт, по суті він замінюється на новий, оновлений. Тобто старий коміт ніби ніколи не існував і його не буде видно в історії. Такий спосіб дає можливість не засмічувати історію різними повідомлення. 
Але не варто виправляти коміти, що вже були запушені на публічну гілку. Потрібно робити це лише локально, щоб інші не скопіювали вашу помилку собі.
#. Перерахуйте та коротко окресліть відомі вам **базові** типи даних Python.
	-Рядок - використовується, коли потрібно зберегти послідовність якихось символів;
Числа - використовується для зберігання числових значень;
Список - використовується, щоб зберігати колекції, які складаються з різних типів даних. Цей тип змінний.
Кортеж - теж саме, що й список, тільки він незмінний.
#. Множина (set). Для чого слугує? Чим відрізняється від списку (list) та кортежа (tuple)? Наведіть приклади використання.
	-Множина - невпорядкована колекція унікальних елементів, які згруповані одним ім'ям, вона може включати елементи різних типів. Відрізняється від списку і кортежа тим, що множина завжди складається тільки з унікальних елементів. Наприклад, можна виконати різницю множин:
a = {1, 3, 2}
b = {2, 2, 2}
r = a - b
#. Аргументи функцій. Які типи (концептуально) аргументів бувають? Наведіть приклад функції, яка виводить свої аргументи.
	-Функція може приймати довільну к-ть аргументів або не приймати їх зовсім.
Типи аргументів: 
позиційні - тобто передаються в такому порядку, в якому вони визначені;
ключові - передаються з вказівником імені аргумента і його значенням.
def function(a, b):
	print('a =', a, 'and b =', b)
function(2, 3)
Отримаємо результат:
a = 2 and b = 3
#. Лямбда-функції. Де використовуються? Які переваги та недоліки мають? Наведіть приклад лямбда-функції та її використання,
   а також аналог з використанням звичайної (не лямбда-) функції.
	-Лямбда-функції - це спосіб визначення функції. Вона приймає будь-яку к-ть аргументів і складається з одного виразу. Ці функції корисні якщо потрібна одноразова функція (анонімна). Тобто ми використовуємо функцію, але ніде її не оголошуючи. Наприклад, звичайна функція буде виглядати таким чином:
def function(a, b): 
	print('result is')
	return a + b
А лямбда:
print(lambda a, b: a + b)
#. Які цикли Python вам відомі? Яким чином можна зімітувати функціонал циклу do-while з мови С в Python?
	-цикл for (перебирає елементи структур даних і під час кожного проходу виконує тіло циклу), виконується набагато швидше ніж while, але є менш універсальним;
цикл while (виконує тіло циклу доки задана умова для цикла виконується).
Можна зімітувати цикл do-while таким чином:
while True:
	#
	if fail:
	break
Наприклад,
i = 1
while True:
	print(i)
	i = i + 1
	if(i > 3):
	break
#. Які цикли Python вам відомі? Яким чином можна реалізувати "якщо не було виконано жодного разу" з циклами?
	-цикл for (перебирає елементи структур даних і під час кожного проходу виконує тіло циклу), виконується набагато швидше ніж while, але є менш універсальним;
цикл while (виконує тіло циклу доки задана умова для цикла виконується).
