==============================
Геращенко Артем Юрійович
==============================


#. Локальні та віддалені репозиторії Git. Наведіть команду для відправки локальних комітів з гілки dev до віддаленого репозиторію.

   - Локальний репозиторій -- це репозиторій який зберігається на локально на комп'ютері. 
   Це може бути репозиторій який колись раніше клонували, або репозиторій який був створений локально і ніде більше не розміщений.
   Віддалений репозиторій Git - це репозиторій який зберігається на сервері GitHub`а, його можна клонувати на свій комп'ютер і репозиторій стане локальною копією.
   Для відправки комітів з гілки dev можна використати команду git push origin dev

#. Що таке об'єднання гілок та для чого використовується? Конфлікти при об'єднанні.
   Наведіть приклад конфлікту (синтаксис) та команди для внесення змін до репозиторію після вирішення конфлікту.

#. Перерахуйте та коротко окресліть відомі вам **базові** типи даних Python.

   - Int використовується для збереження цілих чисел та операцій над ними.
   Float використовується для збереження чисел з плаваючою точкою та операцій над ними.
   Complex використовується для збереження комплексних чисел та операцій над ними.
   String використовується для збереження строк та операцій над ними, послідовність символів у лапках (одинарних чи подвійних)
   Lists списки, послідовність елементів у квадратних скобках та розділених комою.
   Dictionaries словники, записуються у фігурних скобках у форматі {'key': 'val', 'key1': 'val1'}
   Tuples кортежі, послідовність елементів у скобках та розділені комою tuple('val', 'val1')
   Sets множини, це послідовність унікальних елементів, які розділені між собою комою та укладені у фігурні дужки.
   Boolean логічний тип для жбереження істенних або хибних значень (True, False, 1, 0).

#. Наведіть код для створення списку, що містить в якості елементів цілочисленні значення від 1 до 19 (включно) з кроком 1,
   тобто 1, 3, 5, 7, 9, 11, 13, 15, 17, 19. У відповіді вирішальне значення має оптимальність конструкції.

   - list(range(1, 20, 2)

#. Docstring у функціях. Для чого використовуються? Наведіть приклад функції, що виконує розрахунок за певною формулою
   з області електроніки або фінансів (на власний розсуд) та містить Docstring (Coding Style – Google)

   - Docstring використовують для опису роботи функції, аргументів функції та що повертає функція.
   def amperage(U: int, R: int)
    '''This function calculates the current values
    
    Args:
        U: integer voltage value.
        R: integer resistance value.
    
    Returns:
        Current value 
    '''
    
    I = U/R

    return I

#. Аргументи функцій. Яким чином задати значення аргументу за замовчуванням, якщо таким аргументом є порожній список? Коли це не спрацює?
   Наведіть приклад (пов'язаний з галуззю електроніки, наприклад, розрахунок за формулою).

#. Конструкція умовного виконання Python. Наведіть приклад коду, де в умові обчислюється логічний вираз
   *(A && B) || ((!C) && (!D))*. Якщо умова виконується, вивести "OK" в стандартний вивід, якщо ні – вивести "FAIL"
#. Створити клас Animal. Унаслідувати від нього два класи *Mammal* та *Amphibian*.
   Від класу *Mammal* унаслідувати два класи – *Cat* та *Dog*.
   Для класу *Mammal* визначити метод ``milk()``, який не буде реалізований в даному класі, натомість реалізовуватиметься в субкласах.
   Для класу *Amphibian* визначити метод ``swim()``, який виводитиме в стандартний вивід *"{name}: swimming makes me feel good"*.
   При виклику метода ``milk()``, *Cat* повинен виводити *"{name}: meow!"*, а *Dog* – *"{name}: woww!"*.
   Замість *{name}* підставляти значення атрибута ``name``, який задається при створенні об'єкту.
   Навести приклад використання.

   class Animal:
       """docstring"""

   class Mammal(Animal):
       """docstring"""

   class Cat(Mammal):
      """docstring"""

   class Dog(Mammal):
       """docstring"""


   class Amphibian(Animal):
      """docstring"""

   ...
