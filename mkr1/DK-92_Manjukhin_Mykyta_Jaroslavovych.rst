==============================
Манюхін Микита Ярославович
==============================


#. Наведіть команди git для додавання файлів та директорій ./dev ./dev/file.c ./.gitignore до локального репозиторію одним комітом
   (уважно).
   
#. Який формат опису повідомлень комітів використовується в курсі? Навіщо потрібно дотримуватися певного формату?
   Наведіть приклад команди, що додає до репозиторію коміт з важливими виправленнями кодової бази

#. Словник (dict). Для чого використовується? Шляхи створення. 
   Як за допомогою ``dict`` зімітувати множину (``set``) та чому *зазвичай* не варто цього робити? Наведіть приклади коду.
   
   -Відповідь
   Словник (dict) - це одна з структур даних, яка зберігає змінний невпорядковий набір елементів типу "{ключ:значення}", де доступ до значень здійснюється по ключу. З dict        можна працювати, як і з іншими структурами даних, тобто видаляти, додавати елементи і т.д.
   Приклади створення словника:
   colors = {Red: 1, Green: 2, Blue: 3} //Ми задали ключі Red, Green, Blue та їх знаення 1, 2 , 3 відповідно.
   colors = {} //Пустий словник
   num = {'Nums1': [1, 2, 3], 'Nums2': [0, 9, 8]} //Словник, який зберігає набір значень
  
   
#. Множина (set). Для чого слугує? Чим відрізняється від списку (list) та кортежа (tuple)? Наведіть приклади використання.

   -Відповідь
   Set - це невпорядкований список, який відноситься до змінних типів даних. Очевидно, що індексів у елементів немає, тому що елементи стоять у випадковому порядку.
   Set має високу швидкість пошуку по елементам, тобто його використовують коли немає різниці в якому порядку розташований елемент, а потрібно просто швидко знайти його. 
   Різниця між set'ом та list, tuple в тому, що у list елементи розташовані послідовно і мають свій індекс (перший 0, далі 1 і .т.д.), а tuple неможна змінювати. 
   
#. Створіть функцію, яка приймає в якості першого аргументу бажаний опір послідовно з'єднаних резисторів *R* [Ом],
   а в якості подальших аргументів – величини резисторів, що є в наявності [Ом].
   Функція повертає кортеж (tuple), першим елементом якого є словник типу ``{номінал: кількість}``, а другим
   елементом – абсолютне відхилення результуючого опору від бажаного [Ом].
   
#. Позиційні та лише-позиційні аргументи функцій. Яким чином функція може приймати довільне значення позиційних аргументів?
   Наведіть приклад (пов'язаний з галуззю електроніки, наприклад, розрахунок за формулою).
   
   -Відповідь
   Позиційні аргументи, це аргументи які підставляються згідно з позицією імен аргументів у визначенні функції. Лише-позиційні аргументи - кількість аргументів та їх порядок у    виклику функції має точно відповідати визначенню функції. Щоб функція приймала довільне значення позиційних аргументів використовуют *args. При виклику функції на місце        цього параметра передається список аргументів, укладених у кортеж.
   
#. Конструкція умовного виконання Python. Яким чином можна реалізувати приорітетну логіку перевірок з її допомогою?
   Наведіть приклад коду, де спочатку перевіряється виконання логічного виразу *A та B*, далі виразу *лише A*.
   Якщо виконується перша умова *A та B*, вивести "ONE"; якщо наступна *лише А*, вивести "TWO"; якщо жодна з умов, вивести "FAIL".
   
   -Відповідь
   
   if (A and B) == True:
      print('ONE')
   elif A == True, B == False:
      print('TWO')
   else:
      print('FAIL')
    
#. Створити клас Animal. Унаслідувати від нього два класи *Mammal* та *Amphibian*.
   Від класу *Mammal* унаслідувати два класи – *Cat* та *Dog*.
   Для класу *Mammal* визначити метод ``milk()``, який не буде реалізований в даному класі, натомість реалізовуватиметься в субкласах.
   Для класу *Amphibian* визначити метод ``swim()``, який виводитиме в стандартний вивід *"{name}: swimming makes me feel good"*.
   При виклику метода ``milk()``, *Cat* повинен виводити *"{name}: meow!"*, а *Dog* – *"{name}: woww!"*.
   Замість *{name}* підставляти значення атрибута ``name``, який задається при створенні об'єкту.
   Навести приклад використання.
