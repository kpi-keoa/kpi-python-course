==============================
Кирієнко Михайло Олександрович
==============================


#. Для чого слугує файл .gitignore? Наведіть його синтаксис для виключення всіх файлів з розширенням .o в усіх директоріях та
   директорії build в корені репозиторію
   
   -.gitignoreФайл є звичайним текстовим файлом , в якому кожен рядок містить шаблон для файлів/каталогів ігнорувати. Зазвичай він знаходиться у кореневій папці репозиторію.
   Однак ви можете помістити його в будь-яку папку в репозиторії, і у вас також може бути кілька .gitignoreфайлів. 
   Шаблони у файлах відносяться до розташування цього файлу .gitignore.
   
#. Що таке об'єднання гілок та для чого використовується? Конфлікти при об'єднанні.
   Наведіть приклад конфлікту (синтаксис) та команди для внесення змін до репозиторію після вирішення конфлікту.
   
   - Допустимо у нас є дві гілки які нам необхідно об'єднати Є гілка майстер, а є гілка в якій працювали саме ви, щоб не змінювати основну гілку. 
   Коли ви закінчили свою роботу ви    зрозуміли, що можна з'єднати гілки.
   Для того, щоб об'єднати ці гілки, необхідно переключитися на гілку, в яку ви хочете внести зміни.
   GIT виконує тристороннє злиття, використовуючи коміти гілок, що об'єднуються, і спільного батьківського комміту.
   GIT створює новий результуючий знімок тристороннього злиття, а потім робить коміт, який називається комміт злиття, так як у нього більше одного предка.
   Коли зміни злиті, гілка в якій ви працювали, більше не потрібна і її можна видалити.
   Конфлікти
   Іноді процес не відбувається гладко. Якщо ви змінили одну і ту ж частину одного і того ж файлу по-різному 
   в двох гілках, що об'єднуються, Git не зможе їх чисто поєднати.

#. Строкові типи Python. У чому відмінність між Unicode-строкою та байтовою строкою? Який mutable-аналог існує для байтової строки?
   
   -Строка - незмінна послідовність Unicode-символів. Для збереження цих символів використовується тип рядка (str).
   Байти - незмінна послідовність байтів. Для зберігання використовується тип bytes байти, які програма зчитує, треба якомога раніше перетворити на Юнікод (рядок)
   всередині програми працювати з Юнікод. Юнікод треба перетворити на байти якомога пізніше, перед передачею. Відповідно, треба знати, як виконувати перетворення байтів у рядок    і навпаки. Для цього і потрібне кодування. Кодування можна подавати як ключ шифрування, який вказує:
   як "зашифрувати" рядок у байти (str -> bytes). Використовується метод encode (схожий encrypt)
   як "розшифрувати" байти у рядок (bytes -> str). Використовується метод decode (схожий decrypt)
   
   
#. Якому емодзі відповідає байтова строка ``b'\xff\xfe=\xd8\r\xdc'`` (UTF-16)? Що значить даний запис байтової строки?
   Наведіть приклад коду, що перекодує дану строку в UTF-8 та вкажіть результат у вигляді коментаря
   
   -
   
#. Аргументи функцій. Яким чином задати значення аргументу за замовчуванням? Коли це не спрацює?
   Наведіть приклади (пов'язані з галуззю електроніки, наприклад, розрахунок за формулою).
   
   - Аргумент за замовчуванням (параметр за замовчуванням) — це аргумент, який набуває значення за умовчанням
   (задається в описі функції), якщо під час виклику функції аргументу не передається значення.
   Параметри зі значенням за замовчуванням у списку параметрів не можуть передувати параметрам без значення за замовчуванням. Тобто 
   значеннями за замовчуванням можуть бути забезпечені тільки параметри, які знаходяться в кінці списку параметрів. 
   
   
#. Лямбда-функції. Де використовуються? Які переваги та недоліки мають? Наведіть приклад лямбда-функції та її використання,
   а також аналог з використанням звичайної (не лямбда-) функції.
   
   -Лямбда в Python — це ще один спосіб визначення функції. вони корисні лише в тому випадку, коли потрібна одноразова функція.
   Анонімні функції створюються за допомогою інструкції lambda
   Лямбда приймає будь-яку кількість аргументів (або жодного), але складається з одного виразу і в цьому її мінус.
   Ось базовий синтаксис лямбда-функції в Python:lambda arguments: expression
   Користь користуванням даною функцією є стиснення коду
   def even_fn(x):
    if x % 2 == 0:
    return True
   return False

   print(list(filter(even_fn, [1, 3, 2, 5, 20, 21])))
   
   print(list(filter(lambda x: x % 2 == 0, [1, 3, 2, 5, 20, 21])))
   Результат цих двох кодів однаковий, однак розмірність між ними різна

#. Тернарний оператор Python. Навести код, що **за допомогою тернарного оператора**
   присвоїть змінній ``var`` значення ``69`` якщо змінна ``arg`` задана в ``None``, в іншому випадку – присвоїть значення ``arg``.
   Як зробити це без тернарного оператора? Наведіть приклад коду.
   
   -Тернарний оператор - це конструкція, яка за своєю дією аналогічна конструкції if-else, але є виразом.  
   file mkr1_7.py
   def ternar(arg):
   var = 69
   return var if arg == None else arg
   print(var)
   
#. Створити клас. Кожен об'єкт типу класу (instance) містить одне поле ``val``, яке задається при створенні.
   При виведенні об'єкту за допомогою ``print(...)``, формат виводу повинен відповідати *{ClassName}({val})*,
   де *{ClassName}* – ім'я класу, а *{val}* – значення поля ``val``.
   
   -
