==============================
Романенко Антон Костянтинович
==============================


#. Локальні та віддалені репозиторії Git. Наведіть команду для відправки локальних комітів з гілки dev до віддаленого репозиторію.
	
	Локальні репозиторії - репозиторії що загалом знаходяться на нашому ПК, та до яких маємо доступ лише ми
	Віддалені репозиторії - репозиторії що зачасту знаходяться на сервері, є основною гілкою проекту.
	
	Приклад відправки з локального у віддалений:
	git push origin branch
	
#. Наведіть команди git для додавання файлів та директорій ./dev ./dev/file.c ./.gitignore до локального репозиторію одним комітом
   (уважно).
#. Числові типи Python. **Коротко** опишіть з прикладами використання. Створіть функцію, що розраховує реактивний опір
   конденсатора з ємністю *C* [Ф] на частоті *f* [Гц]. Якщо значення *f* не задано користувачем, за замовчуванням
   використати 1 кГц.
   
   - Відповідь: 
   У мові Python існують числові типи: int, long, float, complex
   
   int - звичайне ціле число (1, 2, 42375, -4357234)
   long - велике ціле число яке більше від [-2^32 .. 2^32 - 1], може бути представлене у шістнадцятковому вигляді (5353245543523629843, 0xFFFFFFFFFBBBFFFFAA)
   float - число з плаваючою крапкою (2.431, 0.5, -324.888777)
   complex - комплексне число (3j, 3e+1j, 1e-8j)
   
   Функція:
   PI = 3.14
   
   def react_res(cap, freq = 1000):
		rezult =  1/(2*PI*freq*cap)
		return rezult 
   
#. Строкові типи Python. У чому відмінність між Unicode-строкою та байтовою строкою? Який mutable-аналог існує для байтової строки?

#. Створіть функцію, яка приймає в якості першого аргументу бажаний опір послідовно з'єднаних резисторів *R* [Ом],
   а в якості подальших аргументів – величини резисторів, що є в наявності [Ом].
   Функція повертає кортеж (tuple), першим елементом якого є словник типу ``{номінал: кількість}``, а другим
   елементом – абсолютне відхилення результуючого опору від бажаного [Ом].
   
   
   
#. Docstring у функціях. Для чого використовуються? Наведіть приклад функції, що виконує розрахунок за певною формулою
   з області електроніки або фінансів (на власний розсуд) та містить Docsting (Coding Style – Google)
	
	- Відповідь:
	Docsting у функціях використовується для коментування та написання документації для
	функції зовнішніх скриптів, бібліотек, модулів, тощо. 
	Потрібен задля розуміння функцій які виконує ця чи інша функція.
	
	Приклад:
	
	def OmFunc(amperage, resistance):
		"""Example Google codig style:
		
		This module shows how to calculate voltage by elementary Ohm's law.
								`U = I * R`
		
		Args:
			amperage (float): current amperage in gain.
			resistance (float): resistance of chain section
			
		Example:
			>> OmFunc(2, 220)
			440.00
			
		Return:
			Voltage of cahin section
		"""
	
		return amperage * resistance
	
#. Конструкція умовного виконання Python. Яким чином можна реалізувати приорітетну логіку перевірок з її допомогою?
   Наведіть приклад коду, де спочатку перевіряється виконання логічного виразу *A та B*, далі виразу *лише A*.
   
   - Відповідь
	Умовне виконання 
	
	if (state):
		...task...
	else:
		...task...
	
	Пріорітетну логіку можливо реалізувати завдяки конструкціїї elif послідовно перевіряти умову, де за пріорітетністю
	спочатку перевіряється перша умова, потім друга, третя і тп.
	
	if (state1):
		...task1...
	elif (state2):
		...task...
	elif (state3):
		...task...
	else:
		...task...
	
	Приклад логічного виразу *A та B*
	if (a == b == 1)
		print("ONE")	
	elif (a == 1 and b == 0)
		print("TWO")
	else 
		print("FAIL")
		
   Якщо виконується перша умова *A та B*, вивести "ONE"; якщо наступна *лише А*, вивести "TWO"; якщо жодна з умов, вивести "FAIL".
   
#. Які цикли Python вам відомі? Яким чином примусово перейти до наступної ітерації в тілі циклу? Наведіть приклад коду.

	-Відповідь
	
	Існують цикли виду 
	while(..):
		...
	
	
	for .. in ...:
		...
		
	Приклад:
		for i in range(10):
			if (i % 2 == 0):
				print(i)
			else:
				continue
			
			
			print ("NEXT NUM")
	
	
	