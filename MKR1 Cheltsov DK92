==============================
Чельцов Георгій Сергійович
==============================

- Завдання
#. Який формат опису повідомлень комітів використовується в курсі? Навіщо потрібно дотримуватися певного формату?
   Наведіть приклад команди, що додає до репозиторію коміт з важливими виправленнями кодової бази

#. Що таке об'єднання гілок та для чого використовується? Конфлікти при об'єднанні.
   Наведіть приклад конфлікту (синтаксис) та команди для внесення змін до репозиторію після вирішення конфлікту.
   
#. Множина (set). Для чого слугує? Чим відрізняється від списку (list) та кортежа (tuple)? Наведіть приклади використання
#. Оператор ідентичності та оператор ``==``. В чому їх відмінності? 
   Коли в умовних конструкціях варто використовувати той чи інший оператор?
   
#. Що таке she-bang та для чого використовується? Який she-bang буде максимально коректним для Python 3?
   Чи використовується she-bang в скриптах? Якщо так, чому? Якщо ні, коли?
#. Позиційні та лише-позиційні аргументи функцій. Яким чином функція може приймати довільне значення позиційних аргументів?
   Наведіть приклад (пов'язаний з галуззю електроніки, наприклад, розрахунок за формулою).
   
#. Конструкція умовного виконання Python. Яким чином можна реалізувати приорітетну логіку перевірок з її допомогою?
   Наведіть приклад коду, де спочатку перевіряється виконання логічного виразу *A та B*, далі виразу *лише A*.
   Якщо виконується перша умова *A та B*, вивести "ONE"; якщо наступна *лише А*, вивести "TWO"; якщо жодна з умов, вивести "FAIL".
#. Тернарний оператор Python. Навести код, що **за допомогою тернарного оператора**
   присвоїть змінній ``var`` значення ``69`` якщо змінна ``arg`` задана в ``None``, в іншому випадку – присвоїть значення ``arg``.
   Як зробити це без тернарного оператора? Наведіть приклад коду.
   
- Выдповіді
#. Опис коміта повинен бути лаконічним та міститі інформіцію що міститься в цьму коміті. Дотримання певного формату опису комітів 
   дозволяє простіше їх перешлядати( та виглядае гарно та більш професійно).
   $ git commit
#. -
#. Set - множина, вбудована структура данних в python. 
   Множина - це набір унікальних елементів в випадековому порядку (неупорядоченный список). Множина класна тим що виконання операції
   "належить об'єкт множині" відбуваеться швидше ніж в списках та кортежах.
   На відміну від списку та кортежу множина зберігає елементи в випадковому поряжку, також на відміну від кортежу елементи можна змінювати.
   Множина використовуеться в випадках коли потрібно перевіряти належність елементів до до набору унікальних елементів і нема необхідності в порядку збеерження.
#. Оператор = використовуеться для присвоення значень до зманних, а оператор == порівннюе та відає true or false. Оператор = в арифметичних діях, == в логічних.  
#. Шибенг - це перша строка файлу яка починаеться з (#!) написаного на скриптовій мові. 
   У системах Unix завантажувач розуміе залишок рядка після (#!) як розмішення файла програми интерпритатора : 
   **#!/usr/bin/env python3.5** 
   Завантажувач запускає дану программу і передає їй ім'я файлу скрипту з шебенгом як параметр.
   У системах Windows не існує поняття «режим виконання». Програма встановлення Python автоматично пов’язує файли .py з python.exe, так що подвійне клацання 
   файлу Python запускає його як сценарій.  
   Скрипту можна надати режим виконання або дозвіл за допомогою команди chmod:
   **$ chmod +x myscript.py**
#. -
#. file MKR1_queue.py
from queue import PriorityQueue

func = PriorityQueue() #we initialise the PQ class instead of using a function to operate upon a list.

A = 1
B = 0


func.put((1, A*B))
func.put((2, A))

while func:
    if A*B == 1:
        print(func.get(), "ONE")
    if A == 1:
        print(func.get(), "TWO")
    if ((A != 1)&(B != 1)):
        print("FAIL")


#. file MKR1_Ternar.py
def ternar(arg):
   var = 69
   return var if arg == None else arg
   print(var)


  





